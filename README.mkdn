# NAME

Tfall - Generic interface for Perl5 template engines.

# SYNOPSIS

    use Tfall;

    my $tmpl = Tfall->new('/path/to/template.tt');
    $tmpl->render({name => 'John'}); # => string

# DESCRIPTION

Tfall is generic interface for Perl5 template engines.

# METHODS

- my $tmpl = Tfall->new($path[, @args]);

This method is factory method for Tfall::* classes.

Destination class is determined by $path's extension.
For example, you passed $path as 'foo.tt', then you got instance of Tfall::TT.

- Tfall->register($ext, $class);

This method associates a filename pattern with a specific template implementation. To use TT for files ending in a .foo extension:

    Tfall->register('bar', 'Tfall::TT');

- Tfall->is_registered($ext)

You can check the $ext as registered or not.

- my $klass = Tfall->lookup($ext);

Lookup template engine from $ext.

# Template Engine Class

- $tmpl->render(@args);

This method rendering template with @args.

If got error, this method returns 'undef'.This method never die if got parse error.

- $tmpl->errstr();

Get error string for last rendering.

# How to create new tfall engine.

Tfall's class can use [Tfall::Base](http://search.cpan.org/perldoc?Tfall::Base) as abstract base class.

Tfall::Base provides following methods.

- my $tmpl = Tfall::Base->new($stuff, @args);

Create new instance of tfall engine.

$sutff should allows Str for filename and ScalarRef for text.

- $tmpl->args();

This method returns @args of Tfall::Base->new($stuff, @args).

This method is provided for author of Tfall::*.

- $tmpl->stuff();

This method returns $stuff of Tfall::Base->new($stuff, @args).

This method is provided for author of Tfall::*.

- $tmpl->slurp();

This method reads content from $tmpl->stuff().
This method makes plain string both ScalarRef and Str.

This method is provided for author of Tfall::*.

Then, you can create new template wrapper with [Tfall::Base](http://search.cpan.org/perldoc?Tfall::Base).

You should implement only one abstract method named __render__.

For example, you can write TT bidingigs as following:

    package Tfall::TT;
    use strict;
    use warnings;
    use parent qw/Tfall::Base/;
    use Template;

    sub render {
        my ($self, @args) = @_;
        my $tt = Template->new(@{$self->{args}});
        $tt->process( $self->{stuff}, @args, \my $out )
            or do { $self->errstr( $tt->error ); return };
        $out;
    }

    1;

__process__ method MUST not throw any exceptions from template engine.
If the template engine raise exception, you should catch the exeception and set it to $self->errstr and return undef.

# AUTHOR

Tokuhiro Matsuno <tokuhirom AAJKLFJEF GMAIL COM>

# SEE ALSO

[Any::Template](http://search.cpan.org/perldoc?Any::Template), <http://github.com/rtomayko/tilt>

# LICENSE

Copyright (C) Tokuhiro Matsuno

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.